module Ruby1_9OneLiners
  EXPECT_NO_METHODS=[ #no errors either
    '->a; h do 123 end',
    '->{}',
    '-> {}',
    '->;{}',
    '->(;){}',
    '->a{}',
    '->a {}',
    '->a;{}',
    '->(a;){}',
    '->a,b{}',
    '->a,b;{}',
    '->a,b;c{}',
    '->(a,b;){}',
    '->(a,b;c){}',
    '$f.($x,$y)',
    '$f::($x,$y)',
    '__ENCODING__',
    '__ENCODING__ +"foo"',
    'module __ENCODING__::A; end',
    '/(?<foo>bar)/ =~ "baz"; foo +1',
    "/(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\c\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\c\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\\\c(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\\\c(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\C-\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\C-\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\\\C-(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\\\C-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\(?#(?<foo>bar))/ =~ "baz"; foo +1',
    "/\\(?#(?'foo'bar))/ =~ 'baz'; foo +1",
    '/\\[(?<foo>bar)]/ =~ "baz"; foo +1',
    "/\\[(?'foo'bar)]/ =~ 'baz'; foo +1",

    '/z(?<foo>bar)/ =~ "baz"; foo +1',
    "/z(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\c\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\c\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\\\c(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\\\c(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\C-\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\C-\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\\\C-(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\\\C-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\(?#(?<foo>bar))/ =~ "baz"; foo +1',
    "/z\\(?#(?'foo'bar))/ =~ 'baz'; foo +1",
    '/z\\[(?<foo>bar)]/ =~ "baz"; foo +1',
    "/z\\[(?'foo'bar)]/ =~ 'baz'; foo +1",
  ]

  EXPECT_1_METHOD=[
    'def self.foo; 1 end',
    '->{ foo=1 }; foo',
    '->do foo=1 end; foo',
    'def __FILE__.foo; 1 end',
    'def __LINE__.foo; 1 end',
    'def a(b,*c,d) 1 end',
    'def a(*c,d) 1 end',
    'def Z::a(b,*c,d) 1 end',
    'def Z::a(*c,d) 1 end',
    'a{|b,*c,d| 1 }',
    'a{|*c,d| 1 }',
    'def a(b,(x,y),d) 1 end',
    'def a((x,y),d) 1 end',
    'def Z::a(b,(x,y),d) 1 end',
    'def Z::a((x,y),d) 1 end',
    'a{|b,(x,y),d| 1 }',
    'a{|(x,y),d| 1 }',
    'def a(b,(x,*y),d) 1 end',
    'def a((x,*y),d) 1 end',
    'def Z::a(b,(x,*y),d) 1 end',
    'def Z::a((x,*y),d) 1 end',
    'a{|b,(x,*y),d| 1 }',
    'a{|(x,*y),d| 1 }',
    'def a(b,(x,(y,z)),d) 1 end',
    'def a((x,(y,z)),d) 1 end',
    'def Z::a(b,(x,(y,z)),d) 1 end',
    'def Z::a((x,(y,z)),d) 1 end',
    'a{|b,(x,(y,z)),d| 1 }',
    'a{|(x,(y,z)),d| 1 }',
    'module __ENCODING__::A include B; end',
    'def __ENCODING__; 342 end',
    'def __ENCODING__.foo; 1 end',
    'def Z::__ENCODING__; 342 end',
    #'def Z::__ENCODING__.foo; 1 end', #oops, 2 methods here
    '/\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\c(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\c(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\C-(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\C-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\M-(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\M-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\\\\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\\\\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/\\\\c\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/\\\\c\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/(?#(?<foo>bar))/ =~ "baz"; foo +1',
    "/(?#(?'foo'bar))/ =~ 'baz'; foo +1",
    '/[(?<foo>bar)]/ =~ "baz"; foo +1',
    "/[(?'foo'bar)]/ =~ 'baz'; foo +1",
    '/[qwe&&[^ty](?<foo>bar)]/ =~ "baz"; foo +1',
    "/[qwe&&[^ty](?'foo'bar)]/ =~ 'baz'; foo +1",
    '/[qwe&&[^(?<foo>bar)]]/ =~ "baz"; foo +1',
    "/[qwe&&[^(?'foo'bar)]]/ =~ 'baz'; foo +1",
    '/[qwe&&[^ty&&[^uip]](?<foo>bar)]/ =~ "baz"; foo +1',
    "/[qwe&&[^ty&&[^uip]](?'foo'bar)]/ =~ 'baz'; foo +1",
    '/[qwe&&[^ty&&[^uip](?<foo>bar)]]/ =~ "baz"; foo +1',
    "/[qwe&&[^ty&&[^uip](?'foo'bar)]]/ =~ 'baz'; foo +1",
    '/[qwe&&[^ty&&[^uip(?<foo>bar)]]]/ =~ "baz"; foo +1',
    "/[qwe&&[^ty&&[^uip(?'foo'bar)]]]/ =~ 'baz'; foo +1",

    '/z\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\c(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\c(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\C-(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\C-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\M-(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\M-(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\\\\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\\\\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z\\\\c\\(?<foo>bar)/ =~ "baz"; foo +1',
    "/z\\\\c\\(?'foo'bar)/ =~ 'baz'; foo +1",
    '/z(?#(?<foo>bar))/ =~ "baz"; foo +1',
    "/z(?#(?'foo'bar))/ =~ 'baz'; foo +1",
    '/z[(?<foo>bar)]/ =~ "baz"; foo +1',
    "/z[(?'foo'bar)]/ =~ 'baz'; foo +1",
    '/z[qwe&&[^ty](?<foo>bar)]/ =~ "baz"; foo +1',
    "/z[qwe&&[^ty](?'foo'bar)]/ =~ 'baz'; foo +1",
    '/z[qwe&&[^(?<foo>bar)]]/ =~ "baz"; foo +1',
    "/z[qwe&&[^(?'foo'bar)]]/ =~ 'baz'; foo +1",
    '/z[qwe&&[^ty&&[^uip]](?<foo>bar)]/ =~ "baz"; foo +1',
    "/z[qwe&&[^ty&&[^uip]](?'foo'bar)]/ =~ 'baz'; foo +1",
    '/z[qwe&&[^ty&&[^uip](?<foo>bar)]]/ =~ "baz"; foo +1',
    "/z[qwe&&[^ty&&[^uip](?'foo'bar)]]/ =~ 'baz'; foo +1",
    '/z[qwe&&[^ty&&[^uip(?<foo>bar)]]]/ =~ "baz"; foo +1',
    "/z[qwe&&[^ty&&[^uip(?'foo'bar)]]]/ =~ 'baz'; foo +1",
 ]
end
